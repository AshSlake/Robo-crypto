import traceback
import pandas as pd
import numpy as np
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.utils import compute_sample_weight  # Importar a fun√ß√£o correta


class FeatureEngineering:
    def __init__(self):
        pass

    def safe_divide(self, numerator, denominator):
        """
        Fun√ß√£o para garantir a divis√£o segura, evitando divis√µes por zero.
        Retorna np.nan quando o denominador √© zero.
        """
        return np.where(denominator != 0, numerator / denominator, np.nan)

    def clean_data(self, df):
        """
        Limpeza de dados: substitui valores ausentes por 0 e remove linhas com dados inv√°lidos.
        """
        df.fillna(0, inplace=True)
        df.dropna(inplace=True)
        return df

    def create_features(self, df):
        """
        Cria novas features para melhorar a qualidade dos dados de entrada do modelo.
        """
        # üîπ Varia√ß√£o percentual entre m√©dias m√≥veis
        df["var_perc_media_rapida"] = self.safe_divide(
            df["√öltima M√©dia R√°pida"] - df["√öltima M√©dia Lenta"],
            df["√öltima M√©dia Lenta"],
        )

        # üîπ Normaliza√ß√£o do MACD
        df["macd_normalizado"] = df["MACD"] / (
            df["M√©dia da Volatilidade"] + df["√öltima Volatilidade"]
        )

        # üîπ Suaviza√ß√£o do gradiente r√°pido e lento
        df["gradiente_rapido_suave"] = df["Gradiente R√°pido"].ewm(span=5).mean()
        df["gradiente_lento_suave"] = df["Gradiente Lento"].ewm(span=5).mean()

        # üîπ M√©dia simples de gradientes r√°pidos e lentos
        df["gradiente_rapido_suave_sma"] = (
            df["Gradiente R√°pido"].rolling(window=10).mean()
        )
        df["gradiente_lento_suave_sma"] = (
            df["Gradiente Lento"].rolling(window=10).mean()
        )

        # üîπ Cria√ß√£o de uma pontua√ß√£o de tend√™ncia
        df["tendencia_score"] = (
            (
                df["M√©dia Recente dos Gradientes R√°pidos"]
                > df["M√©dia Necess√°ria para Tend√™ncia de Alta"]
            ).astype(int)
            + (df["gradiente_rapido_suave"] > df["gradiente_lento_suave"]).astype(int)
            + (df["macd_normalizado"] > 0).astype(int)
        )

        # üîπ Transforma√ß√£o logar√≠tmica para volatilidade
        df["log_volatilidade"] = np.log1p(df["√öltima Volatilidade"])

        # üîπ Indicador de revers√£o
        df["indicador_reversao"] = np.where(
            (df["gradiente_rapido_suave"] < 0) & (df["gradiente_lento_suave"] > 0), 1, 0
        )

        # üîπ Criar a coluna de target com base nos sinais de compra e venda
        df["column_target"] = df["target"].copy()

        # üîπ Filtragem de colunas irrelevantes
        columns_to_drop = [
            "Gradiente R√°pido",
            "Gradiente Lento",
            "M√©dia Recente dos Gradientes R√°pidos",
        ]
        df.drop(columns=columns_to_drop, inplace=True, errors="ignore")

        return df

    def evaluate_feature_importance(self, df, target_column):
        """
        Avalia a import√¢ncia das features utilizando Gradient Boosting com tratamento de erros e balanceamento de classes.
        """
        try:  # Movendo o try para fora do loop para capturar erros de pr√©-processamento tamb√©m
            X = df.drop(columns=[target_column])
            y = df[target_column]

            # Convers√£o de booleanos (aprimorada):
            for col in X.select_dtypes(
                include="object"
            ).columns:  # Iterar apenas em colunas de objeto
                try:  # Lidar com erros de convers√£o individualmente
                    X[col] = X[col].astype(bool).astype(int)  # Convers√£o mais direta
                except Exception as e:
                    print(f"Aviso: Erro ao converter coluna '{col}' para booleano: {e}")
                    # L√≥gica de fallback (manter como string, preencher com um valor, etc.)
                    X[col] = X[col].fillna(X[col].mode()[0])  # Preencher com a moda

            # Preenchimento de valores ausentes (aprimorado):
            for col in X.select_dtypes(
                include=np.number
            ).columns:  # Preencher apenas colunas num√©ricas
                if X[col].isnull().any():
                    X[col] = X[col].fillna(
                        X[col].median()
                    )  # Usar a mediana √© mais robusto a outliers

            # Calcular pesos de classe (fora do try-except, se n√£o for fonte de erro):

            sample_weights = compute_sample_weight("balanced", y=y)

            # Criar o modelo SEM class_weight:
            model = GradientBoostingClassifier(random_state=42)

            model.fit(X, y, sample_weight=sample_weights)

            importance = model.feature_importances_
            feature_importance = pd.DataFrame(
                {"Feature": X.columns, "Importance": importance}
            )
            feature_importance = feature_importance.sort_values(
                by="Importance", ascending=False
            )
            return feature_importance

        except Exception as e:
            print(f"Erro durante o c√°lculo da import√¢ncia das features: {e}")
            traceback.print_exc()
            return pd.DataFrame({"Feature": [], "Importance": []})

    def generate_target(self, row):
        """
        Gera a vari√°vel alvo baseada nos sinais de compra e venda.

        Par√¢metros:
            row (Series): Linha do DataFrame contendo os sinais de compra e venda.

        Retorna:
            int: 1 para compra, -1 para venda e 0 para neutro.
        """
        # Convertendo para booleano se necess√°rio (caso estejam como string "True"/"False")
        sinal_compra = row["Sinal de Compra"]
        sinal_venda = row["Sinal de Venda"]

        if isinstance(sinal_compra, str):
            sinal_compra = sinal_compra.strip().lower() in ["true", "1", "yes"]
        if isinstance(sinal_venda, str):
            sinal_venda = sinal_venda.strip().lower() in ["true", "1", "yes"]

        if sinal_compra and not sinal_venda:
            return 1  # Compra
        elif sinal_venda and not sinal_compra:
            return -1  # Venda
        else:
            return 0  # Neutro
